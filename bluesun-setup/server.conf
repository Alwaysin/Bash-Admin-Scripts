#Config file

S3_BUCKET="wwwz.jonzobrist.com" #S3 bucket named where you will store all the files
PATH="${PATH}:/usr/local/bin:/usr/local/programs/aws/bin"
DIRS="/var/www /etc/apache2"
TMPDIR="/tmp/bluesun-update-`hostname`-`date +%F-%s`"
#COMMANDS="update-start.sh"
PINGFILE="/var/www/jonzobrist.com/ping.html"
ENDFILENAME="latest.sql.gz"
#*************************** MYSQL CONFIGURATION ***************************# 
# READ THESE COMMENTS THIS COULD BE DANGEROUS IF YOU FORGET TO CREATE CUSTOM VARIABLES PER DATABASE
#
# ALL of the MYSQL variables cascade
# MYSQL_FILENAME points to an ALL DATABASES database dump to restore
# If you set only this you will get a full mysql restore using the file set
# MYSQL_DATABASES points to individual database names to be restored
# If you set only this you will get a full restore of just the named databases (separated by spaces)
# If you set this in addition to MYSQL_FILENAME you will get an ALL DATABASES restore, 
# then individual DATABASES named here will be restored AFTER the ALL DATABASES restore
# databaseName_TABLES points to specific list of tables that will be restored in the named database
# If you set this for a named database then only the individual tables in that database will be restored (separated by spaces)
# 
# Example : You have a database server for your company named dbserver01, it has databases customers,employees these have tables people,access-list
# 
# Situation 1 : You want to backup/restore the full database
# You set the variable MYSQL_FILENAME="dbserver01-mysqldump${ENDFILENAME}"
# 
# Situation 2 : You want to backup/restore only the customers database
# You set the variable MYSQL_DATABASES="customers"
#
# Situation 3 : You want to backup/restore only the customers AND employees databases
# You set the variable MYSQL_DATABASES="customers employees"
#
# Situation 4 : You want to backup/restore only the people table in the customers database
# You set the variable MYSQL_DATABASES="customers"
# AND you set the variable customers_TABLES="people"
#
# Situation 4 : You want to backup/restore both the people and access-list tables in both the customers and employees databases
# You set the variable MYSQL_DATABASES="customers employees"
# AND you set the variable customers_TABLES="people access-list"
#
# Situation 5 : You want to backup/restore a FULL BACKUP of ALL DATABASES, and THEN backup/restore on top of that
# both the people and access-list tables in both the customers and employees databases
# You set the variables
# MYSQL_FILENAME="dbserver01-mysqldump${ENDFILENAME}"
# MYSQL_DATABASES="customers employees"
# AND you set the variable customers_TABLES="people access-list"
#
MYSQL_FILENAME="mysqldump-${ENDFILENAME}" #Filename of a FULL mysql database backup, is restored without a DATABASE name, mysql -u root < ${MYSQL_FILENAME}
#MYSQL_DATABASES="centDB" #Enter DB names seperated by spaces, don't forget to CREATE variables for each DB for the specific tables to backup/restore
#siloDB_TABLES="person" #dbname_TABLES variable will be checked for every entry in MYSQL_DATABASES, if there is NONE it will backup/restore the ENTIRE named DATABASE
#centDB_TABLES="settingDef"
##******************************************** READ COMMENTS ABOVE!!!! DANGEROUS !!!!! *****####
DEBUG=1 # 0 disabled (silent), 1 enabled (DEBUG)
ARCHIVE=1 #1 enables archiving every file that is put to S3, so there will be 1 file created, and uploaded twice each, once as the name PREFIX-current.tar.gz and once with the name PREFIX-timestamp.tar.gz . This will greatly increase the amount of space you have, but will save you from accidentally overwriting your only good backup.
TIMESTAMP=`date +%F-%s` #change here if you want a format other than 2011-07-23-1311447264, avoid spaces or white space
MAX_WAIT_FOR_MYSQL=300 #Set this to the longest time you want to wait for MySQL before aborting
MYSQLDUMP_ARGS="--single-transaction --add-drop-table=TRUE --lock-tables=TRUE --replace=true --extended-insert" #Set this to any special mysqldump arguments you want to use
